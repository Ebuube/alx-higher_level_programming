=========================================
Test file for the class ``BaseGeometry``
=========================================

The class ``BaseGeometry`` from the module ``../7-base_geometry``
contains some public instance methods:
def area(self): which raises an exception
def integer_validator(self, name, value): validates that ``value``
is an integer, where ``name`` is always a string

Note:
	Assumption: ``name`` is alwasy a string

	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
	>>> bg = BaseGeometry()
	>>> integer_validator = bg.integer_validator


Checking for module docstring
===============================

	>>> m = __import__("7-base_geometry").__doc__
	>>> len(m) > 0
	True


Checking for class docstring
=============================

	>>> m = __import__("7-base_geometry").BaseGeometry.__doc__
	>>> len(m) > 0
	True


Checking for method docstring
==============================

	>>> m = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(m) > 0
	True


When value is an integer
=========================

	>>> integer_validator("name", 1)
	...	#doctest: +REPORT_NDIFF
	...	# Expects nothing


When value is not an integer
=============================

	>>> integer_validator("name", 2.5)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: name must be an integer


When value is less than zero
=============================

	>>> integer_validator("name", -13)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: name must be greater than 0


When value is equal to zero
============================

	>>> integer_validator("name", 0)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: name must be greater than 0

When value is greater than zero
================================

	>>> integer_validator("name", 4)
	... #doctest: +REPORT_NDIFF
	... # Expects nothing


Supplying excess arguments
===========================

	>>> integer_validator("name", 4, 5)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given


Supplying insufficient arguments
=================================

	>>> integer_validator("name")
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'
