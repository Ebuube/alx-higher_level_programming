===================================
Test file for the class ``MyList``
===================================

The class ``MyList`` from the module ``../1-my_list``
It inherits from the `` list`` class and it
contains a public instance method ``print_sorted()``  that prints the list,
but sorted (ascending sort)

Note:
	Assumption: All the elements of the list will be of type int

	>>> MyList = __import__("1-my_list").MyList


Checking for module docstring
==============================

	>>> m = __import__("1-my_list").__doc__
	>>> len(m) > 0
	True


Checking for class docstring
=============================

	>>> m = __import__("1-my_list").__doc__
	>>> len(m) > 0
	... #doctest: +REPORT_NDIFF
	True


Checking for method docstring:
==============================

	>>> m = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(m) > 0
	... #doctest: +REPORT_NDIFF
	True


Checking that MyList inherits from list:
========================================

	>>> issubclass(MyList, list)
	... #doctest: +REPORT_NDIFF
	True


Checking for emtpy list:
========================

	>>> new_list = MyList()
	>>> new_list.print_sorted()
	[]


Checking that appending works:
===============================

	>>> new_list.append(1)
	>>> new_list.append(2)
	>>> new_list.append(3)
	>>> new_list.append(4)
	>>> print(new_list)
	... #doctest: +REPORT_NDIFF
	[1, 2, 3, 4]


Checking for list already in correct order:
============================================

	>>> new_list.print_sorted()
	... #doctest: +REPORT_NDIFF
	[1, 2, 3, 4]


Checking for reverse ordered list:
==================================

	>>> new_list = MyList()
	>>> new_list.append(3)
	>>> new_list.append(2)
	>>> new_list.append(1)
	>>> print(new_list)
	... #doctest: +REPORT_NDIFF
	[3, 2, 1]
	>>> new_list.print_sorted()
	... #doctest: +REPORT_NDIFF
	[1, 2, 3]
	>>> print(new_list)
	... #doctest: +REPORT_NDIFF
	[3, 2, 1]


Checking for list with negative number:
=======================================

	>>> new_list = MyList()
	>>> new_list.append(4)
	>>> new_list.append(-3)
	>>> new_list.append(13)
	>>> print(new_list)
	... #doctest: +REPORT_NDIFF
	[4, -3, 13]
	>>> new_list.print_sorted()
	... #doctest: +REPORT_NDIFF
	[-3, 4, 13]
	>>> print(new_list)
	... #doctest: +REPORT_NDIFF
	[4, -3, 13]


Supplying too many arguments to the method:
===========================================

	>>> new_list.print_sorted(1)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
