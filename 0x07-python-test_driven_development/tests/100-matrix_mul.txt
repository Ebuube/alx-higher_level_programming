=======================================
TEST FOR THE ``matrix_mul()`` FUNCTION
=======================================


The ``matrix_mul()`` function from the ``../100-matrix_mul`` module returns
the product of two compatible matrices.

Synatax: matrix_mul(m_a, m_b):
	Args:
		m_a (list of lists): first matrix
		m_b (list of lists): second matrix
	Returns:
		``m_a`` * ``m_b``

Note:
	``m_a`` should be a list of lists of integers\floats.
	The same with ``m_b``

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul


Supplying two compatible lists
===============================

Returns their product

::

	>>> m_a = [
	...	[12, 7, 3],
	...	[4, 5, 6],
	...	[7, 8, 9]
	... ]
	>>> m_b = [
	...	[5, 8, 1, 2],
	...	[6, 7, 3, 0],
	...	[4, 5, 9, 1]
	... ]
	>>> result = matrix_mul(m_a, m_b)

	# test to be removed
	>>> print(result)	#doctest: +REPORT_NDIFF
	... #doctest: +NORMALIZE_WHITESPACE
	[[114, 160, 60, 27],
	 [74, 97, 73, 14],
	 [119, 157, 112, 23]]

	>>> result == [
	...	[114, 160, 60, 27],
	...	[74, 97, 73, 14],
	...	[119, 157, 112, 23]
	... ]	#doctest: +REPORT_NDIFF
	True


Supplying first argument which is not a list
==============================================

The function ``matrix_mul()`` raises a ``TypeError`` exception with
the message ``m_a must be a list``

::

	>>> m_a = int(12)
	>>> m_b = [[1, 3]]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list


Supplying a second argument withc is not list
==============================================

The function ``matrix_mul()`` raises a ``TypeError`` exception with
the message ``m_b must be a list``

::

	>>> m_a = [[1, 3]]
	>>> m_b = int(45)
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list


Supplying a first argument which is not a list of lists
======================================================

The function ``matrix_mul()`` raises a ``TypeError`` exception with
the message ``m_a must be a list of lists``

::

	>>> m_a = [2, 5, 6]
	>>> m_b = [
	... 	[4, 5, -2],
	...	[0, -3.32, 5],
	...	[-4, 0, 0]
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists


Supplying a second argument which is not a list of lists
=========================================================

The function raises a ``TypeError`` exception with the
message ``m_b must be a list of lists``

::

	>>> m_a = [[1, 5]]
	>>> m_b = ['b', 34, 43]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists


Supplying a first argument which is an empty list
==================================================

The function raises a ``ValueError`` exception with the message
``m_a can't be empty``

::

	>>> m_a = []
	>>> m_b = [[1, 4, 5]]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty


	>>> m_a = [[]]
	>>> m_b = [[1, 4, 5]]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty


Supplying a second argument which is an empty list
===================================================

The function raises a ``ValueError`` exception with the message
``m_b can't be empty``

::

	>>> m_a = [[1, 3, 4]]
	>>> m_b = []
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty


	>>> m_a = [[1, 3, 4]]
	>>> m_b = [[]]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty


One element of the first argument is neither an integer/float
==============================================================

The function raises a ``TypeError`` exception with the message
``m_a should contain only integers or floats``

::

	>>> m_a = [[12, 'k']]
	>>> m_b = [
	...	[3],
	...	[6]
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats


One element of the second argument is neither an integer/float
===============================================================

The function raises a ``TypeError`` exception with the message
``m_b should contain only integers or floats``

::

	>>> m_a = [[90, 34.5]]
	>>> m_b = [
	...	[54.3320],
	...	['k']
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats


First argument has rows of unequal lengths
===========================================

The function raises a ``TypeError`` exception with the message
``each row of m_a must be of the same size``

::

	>>> m_a = [
	...	[97.3],
	...	[12, 42]
	... ]
	>>> m_b = [
	...	[0, -5, -2, 14],
	...	[42, 3, 42, 12]
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size


Second argument has rows of unequal lengths
============================================

The function raises a ``TypeError`` exception with the message
``each row of m_b must be of the same size``

::

	>>> m_a = [[23, 42]]
	>>> m_b = [
	...	[0],
	...	[13, 421]
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size


first argument can't be multiplied by second argument
======================================================

If the number of columns of the first argument is not equal to the
number of rows of the second argument, the function raises a
``ValueError`` exception with the message ``m_a and m_b can't be multiplied``

::

	>>> m_a = [[12, 4, 52]]
	>>> m_b = [
	...	[12, 42],
	...	[423, -32.32]
	... ]
	>>> result = matrix_mul(m_a, m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied


Missing one positional argument
================================

Throws a ``TypeError`` exception with the message
``matrix_mul() missing 1 required positional argument: 'm_b'``

::

	>>> m_b = [[4, 24]]
	>>> result = matrix_mul(m_b)
	... #doctest: +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'


Missing two positional argument
================================

Throws a ``TypeError`` exception with the message
``matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

::

	>>> result = matrix_mul()
	... #doctest +REPORT_NDIFF
	Traceback (most recent call last):
		...
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
